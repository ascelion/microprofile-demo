
buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'org.galaxx.gradle:jandex:1.0.2'
		classpath 'org.openapitools:openapi-generator-gradle-plugin:4.2.+'
		classpath 'pl.allegro.tech.build:axion-release-plugin:1.10.+'
	}
}

apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
	ignoreUncommittedChanges = false
}

group = 'ascelion.microprofile-demo'
version = scmVersion.version

allprojects {
	ext {
		publishName = rootProject.name
		publishBase = 'https://github.com/ascelion'
		publishRepo = 'git@github.com:ascelion'
	}

	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}

	apply plugin: 'extend-project'
	apply plugin: 'lifecycle-base'
	apply plugin: 'eclipse'

	clean {
		delete 'bin', 'target', '*.log'
	}

	cleanEclipse {
		delete '.settings', '.classpath', '.project'
	}

	defaultTasks 'clean', 'build'
}

subprojects {
	group = rootProject.group
	version = rootProject.version

	ext {
		set( 'isRelease', !version.endsWith( '-SNAPSHOT' ) )
		set( 'dockerTag', isRelease ? version : new java.text.SimpleDateFormat("'0.'yyMMdd'.'HH'.'mm").format(new Date()) )
	}

	plugins.withType( JavaPlugin ) {
		// project.apply plugin: 'org.galaxx.gradle.jandex'

		sourceCompatibility = '8'
		targetCompatibility = '8'

		project.apply from: rootProject.file('lombok.gradle')

		sourceSets {
			all {
				output.resourcesDir = output.classesDirs[0]
			}
		}

		dependencies {
			implementation platform( 'org.apache.deltaspike.distribution:distributions-bom:1.9.1' )
			implementation platform( 'io.smallrye:smallrye-bom:3.0.2' )

			implementation platform( 'ascelion.flywaydb:flyway-ext:1.0.3-SNAPSHOT' )
			implementation platform( 'ascelion.config:config-tree:0.1.0-SNAPSHOT' )

			// https://github.com/oracle/helidon/issues/1121
			// https://github.com/pa314159/helidon/tree/issues/1121
			implementation platform( 'io.helidon.microprofile.bundles:helidon-microprofile-3.1:1.4.0' )
			// implementation platform( 'org.glassfish.jersey:jersey-bom:2.29.1' )

			constraints {
				implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2'
				implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'
				implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
				implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
				implementation 'jakarta.transaction:jakarta.transaction-api:1.3.3'
				implementation 'jakarta.ws.rs:jakarta.ws.rs-api:2.1.6'
				implementation 'jakarta.json.bind:jakarta.json.bind-api:1.0.2'

				implementation 'org.slf4j:slf4j-api:1.7.28'

				implementation 'ch.qos.logback:logback-classic:1.2.3'

				implementation 'org.apache.commons:commons-lang3:3.9'
				implementation 'org.apache.commons:commons-text:1.8'

				implementation 'org.flywaydb:flyway-core:6.1.3'

				implementation 'io.leangen.geantyref:geantyref:1.3.9'

				implementation 'com.h2database:h2:1.4.199'
				implementation 'org.postgresql:postgresql:42.2.8'

				implementation 'org.jboss.weld:weld-junit4:2.0.1.Final'
				implementation 'org.hibernate.validator:hibernate-validator:6.1.0.Final'

				implementation 'org.mapstruct:mapstruct:1.3.1.Final'
			}

			compileOnly 'jakarta.annotation:jakarta.annotation-api'
			compileOnly 'jakarta.enterprise:jakarta.enterprise.cdi-api'
			compileOnly 'jakarta.persistence:jakarta.persistence-api'
			compileOnly 'jakarta.validation:jakarta.validation-api'
			compileOnly 'jakarta.ws.rs:jakarta.ws.rs-api'

			compileOnly 'org.eclipse.microprofile.config:microprofile-config-api'
			compileOnly 'org.eclipse.microprofile.rest.client:microprofile-rest-client-api'
			compileOnly 'org.eclipse.microprofile.fault-tolerance:microprofile-fault-tolerance-api'
			compileOnly 'org.eclipse.microprofile.health:microprofile-health-api'
			compileOnly 'org.eclipse.microprofile.openapi:microprofile-openapi-api'
			compileOnly 'org.eclipse.microprofile.metrics:microprofile-metrics-api:2.1.0'

			compileOnly 'ascelion.config:config-tree-api'

			runtimeOnly 'org.postgresql:postgresql'

			implementation 'org.slf4j:slf4j-api'
			runtimeOnly 'ch.qos.logback:logback-classic'
		}

		configurations {
			implementation {
				exclude group: 'org.slf4j', module: 'slf4j-jdk14'
			}
		}

		jar {
			baseName = "${rootProject.name}-${project.name}"
		}
	}

	tasks.withType( JavaCompile ) {
		options.compilerArgs << '-parameters'
	}
	tasks.withType( AbstractArchiveTask ) {
		duplicatesStrategy = 'exclude'
		archiveVersion = ''
	}
	tasks.withType( Tar ){
		compression = Compression.GZIP
	}
	plugins.withType( DistributionPlugin ) {
		distributions.all {
			contents.into '/'
		}
	}
	plugins.withType( ApplicationPlugin ) {
		mainClassName = 'ascelion.kalah.Main'

		application {
			applicationDefaultJvmArgs = [
				'-server',
				'-Djava.awt.headless=true',
				'-XX:+UnlockExperimentalVMOptions',
				'-XX:+UseCGroupMemoryLimitForHeap',
				'-XX:InitialRAMFraction=2',
				'-XX:MinRAMFraction=2',
				'-XX:MaxRAMFraction=2',
				'-XX:+UseG1GC',
			]
		}

		run {
			args '--config', 'application.profile=dev'

			application.applicationDefaultJvmArgs.each {
				jvmArgs it
			}
		}

		plugins.withId( 'docker' ) {
			project.apply from: rootProject.file( 'docker.gradle' )
		}
	}

	eclipse.project.name = "ascelion.${rootProject.name}-${name}"
	eclipse.classpath.downloadSources = true
}

eclipse.project.name = "ascelion.${name}"

wrapper {
	distributionType = 'all'
}

apply from: 'tests.gradle'
//apply from: 'jacoco.gradle'
apply from: 'publish.gradle'
